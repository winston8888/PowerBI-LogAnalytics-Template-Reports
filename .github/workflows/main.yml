# .github/workflows/gitleaks-scan.yml

name: 'Security Scan: Gitleaks'

# This workflow runs on pushes to the main branch and on any pull request.
# You can customize this to fit your branching strategy.
on:
  workflow_dispatch:
  # push:
  #   branches: [ "main", "develop" ]
  # pull_request:
  #   branches: [ "main", "develop" ]

jobs:
  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        # Gitleaks needs the full git history to scan previous commits.
        # '0' indicates a full fetch, not just a shallow clone.
        with:
          fetch-depth: 0

      - name: 'Run Gitleaks Scan'
        # Use the official Gitleaks Action
        uses: gitleaks/gitleaks-action@v2
        env:
          # If you have a Gitleaks config file, you can specify its path here.
          # GITLEAKS_CONFIG_PATH: ${{ github.workspace }}/.gitleaks.toml
          
          # This variable tells Gitleaks where to upload its report as a build artifact.
          # This report will contain any found secrets.
          GITLEAKS_REPORT_PATH: ${{ github.workspace }}/gitleaks-report.json
          
          # The GITHUB_TOKEN is automatically created by Actions and is required for the action
          # to integrate with your repository (e.g., for reporting).
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  analyze-template:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install pbi-tools
      run: |
        $url = "https://github.com/pbi-tools/pbi-tools/releases/download/1.2.0/pbi-tools.1.2.0.zip"
        Invoke-WebRequest -Uri $url -OutFile "pbi-tools.zip"
        Expand-Archive "pbi-tools.zip" -DestinationPath "pbi-tools"

    - name: Install Tabular Editor
      run: |
       # Download and install Tabular Editor 3 CLI
        Invoke-WebRequest -Uri "https://cdn.tabulareditor.com/files/TabularEditor.3.22.1.x64.Net8.zip" -OutFile "te3.zip"
        Expand-Archive "te3.zip" -DestinationPath "TabularEditor3"

    # - name: Extract Power BI Template
    #   run: |
    #     pbi-tools extract "FabricASEngineAnalytics/FabricASEngineAnalytics.pbit" -extractFolder "extracted-model"
    #   shell: pwsh

    - name: Run Best Practice Analyzer
      run: |
       # Define paths
        $tePath = "TabularEditor3\TabularEditor3.exe"
        $reportPath = "FabricASEngineAnalytics\src" # Adjust to your Power BI files location
        
        # Create results directory
        New-Item -ItemType Directory -Force -Path "analysis-results"
        
        # Find all .pbix or .bim files
        $powerBiFiles = Get-ChildItem -Path $reportPath -Include "*.pbix", "*.bim", "*.pbit" -Recurse
        
        foreach ($file in $powerBiFiles) {
            Write-Host "Analyzing: $($file.Name)"
            
            # Run Best Practice Analyzer
            $outputFile = "analysis-results\$($file.BaseName)-bpa-results.json"
            
            try {
                if ($file.Extension -eq ".pbix" -or $file.Extension -eq ".pbit") {
                    # For PBIX/PBIT files, extract model first
                    & $tePath $file.FullName -S "Model.SaveDB(`"temp-model.bim`")"
                    & $tePath "temp-model.bim" -A -O $outputFile
                    Remove-Item "temp-model.bim" -ErrorAction SilentlyContinue
                } else {
                    # For BIM files, analyze directly
                    & $tePath $file.FullName -A -O $outputFile
                }
                
                Write-Host "Analysis completed for: $($file.Name)"
            }
            catch {
                Write-Host "Error analyzing $($file.Name): $_"
                exit 1
            }
        }
        
    - name: Process Analysis Results
      run: |
        # Process and summarize results
        $results = Get-ChildItem -Path "analysis-results" -Filter "*.json"
        $summary = @()
        
        foreach ($result in $results) {
            $content = Get-Content $result.FullName | ConvertFrom-Json
            
            $violations = $content | Where-Object { $_.Severity -in @("Error", "Warning") }
            
            if ($violations.Count -gt 0) {
                $summary += [PSCustomObject]@{
                    File = $result.BaseName
                    Errors = ($violations | Where-Object { $_.Severity -eq "Error" }).Count
                    Warnings = ($violations | Where-Object { $_.Severity -eq "Warning" }).Count
                    Issues = $violations
                }
            }
        }
        
        # Output summary
        if ($summary.Count -gt 0) {
            Write-Host "=== BEST PRACTICE ANALYZER SUMMARY ===" -ForegroundColor Red
            foreach ($item in $summary) {
                Write-Host "File: $($item.File)" -ForegroundColor Yellow
                Write-Host "  Errors: $($item.Errors)" -ForegroundColor Red
                Write-Host "  Warnings: $($item.Warnings)" -ForegroundColor Yellow
                
                foreach ($issue in $item.Issues) {
                    Write-Host "    - [$($issue.Severity)] $($issue.RuleName): $($issue.ObjectName)" -ForegroundColor Gray
                }
            }
            
            # Fail the build if there are errors
            $totalErrors = ($summary | Measure-Object -Property Errors -Sum).Sum
            if ($totalErrors -gt 0) {
                Write-Host "Build failed due to $totalErrors error(s)" -ForegroundColor Red
                exit 1
            }
        } else {
            Write-Host "All files passed best practice analysis!" -ForegroundColor Green
        }
        
    - name: Upload Analysis Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bpa-analysis-results
        path: analysis-results/
        retention-days: 30

  semgrep:
    # User definable name of this GitHub Actions job.
    name: semgrep-oss/scan
    # If you are self-hosting, change the following `runs-on` value: 
    runs-on: ubuntu-latest

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: semgrep/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.
      - uses: actions/checkout@v4
      # Run the "semgrep scan" command on the command line of the docker image.
      - run: semgrep scan --config .semgrep/rules/ --json-output=findings.json

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: findings.json
          retention-days: 1
